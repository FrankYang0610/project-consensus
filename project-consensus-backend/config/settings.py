"""
Django settings for config project.

Generated by 'django-admin startproject' using Django 5.2.6.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path
import os  # Used to build the .env file path
import environ  # django-environ: typed environment variable parser

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Read environment variables from .env in the project root.
# Keep secrets out of source control and configure per environment.
env = environ.Env(
    DEBUG=(bool, False),  # DEBUG defaults to False and is cast to bool
)
environ.Env.read_env(os.path.join(BASE_DIR, ".env"))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
# Do NOT hardcode SECRET_KEY; read it from environment to avoid leaks.
SECRET_KEY = env("SECRET_KEY")  # Raises error if missing (good for early fail)

# Never run with DEBUG=True in production. Configure via .env or system env.
DEBUG = env("DEBUG")

# Comma-separated hostnames/IPs that this Django instance will serve.
# Example: "127.0.0.1,localhost,api.example.com"
ALLOWED_HOSTS = [h.strip() for h in env("ALLOWED_HOSTS", default="").split(",") if h.strip()]


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',

    # Third-party apps
    'rest_framework',           # Django REST Framework for building APIs
    'corsheaders',              # CORS handling for browser cross-origin requests

    # Local apps
    'core',
]

MIDDLEWARE = [
    # Place CORS middleware near the top, before CommonMiddleware,
    # so CORS headers are added to all relevant responses.
    'corsheaders.middleware.CorsMiddleware',

    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'config.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'config.wsgi.application'


# Database
# Use a single DATABASE_URL (e.g. postgresql://user:pass@host:5432/dbname)
# parsed by django-environ. This allows easy switching per environment.
DATABASES = {
    'default': env.db("DATABASE_URL")
}


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# Store timestamps in UTC (USE_TZ=True) and display/parse according to TIME_ZONE.
LANGUAGE_CODE = 'zh-hans'  # Simplified Chinese
TIME_ZONE = 'Asia/Shanghai'   # Use your local zone (e.g. Asia/Shanghai for CN)
USE_I18N = True
USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = 'static/'  # Static URL prefix; set STATIC_ROOT in production and run collectstatic

# CORS and CSRF configuration
# CORS_ALLOWED_ORIGINS controls which browser origins may access this API.
# CSRF_TRUSTED_ORIGINS lists origins (with scheme) trusted for CSRF-protected views.
CORS_ALLOWED_ORIGINS = [o.strip() for o in env("CORS_ALLOWED_ORIGINS", default="").split(",") if o.strip()]
CSRF_TRUSTED_ORIGINS = [o.strip() for o in env("CSRF_TRUSTED_ORIGINS", default="").split(",") if o.strip()]

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Django REST Framework minimal configuration: JSON-only API by default.
REST_FRAMEWORK = {
    "DEFAULT_RENDERER_CLASSES": ["rest_framework.renderers.JSONRenderer"],
    "DEFAULT_PARSER_CLASSES": ["rest_framework.parsers.JSONParser"],
}

# Enable Browsable API only in development for convenient exploration.
if DEBUG:
    REST_FRAMEWORK["DEFAULT_RENDERER_CLASSES"].append(
        "rest_framework.renderers.BrowsableAPIRenderer"
    )
